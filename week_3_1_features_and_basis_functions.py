# -*- coding: utf-8 -*-
"""week_3_1_features_and_basis_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15LBYBFgoh7UkCGioIv3h-It3Ra43ssXx
"""

# from sklearn.linear_model import LinearRegression
# import numpy as np
# import matplotlib.pyplot as plt




import pandas as pd

url='https://raw.githubusercontent.com/Sinchiguano/chicagoUniversity/main/salary_2015.csv'
df = pd.read_csv(url)

print(df.head(3))
print(df['gross'].dtypes)


print('//////////////////////////////')

df['gross'] = df['gross'].str.replace(',', '')
df['gross'] = df['gross'].astype(int)
print(df['gross'].dtypes)

meanSalaries=pd.DataFrame(df.groupby('title')['gross'].mean().reset_index(name='mean').sort_values(['mean'],ascending=False))
print(meanSalaries.head(6))
print(meanSalaries.shape)
print(meanSalaries.dtypes)
print(type(meanSalaries))



print('//////////////////////////////')
# meanSalaries=pd.DataFrame(df.groupby(['title'])['gross'].mean())
# print(meanSalaries.head(3))
# print(meanSalaries.shape)
# print(meanSalaries.dtypes)

"""There are a lot of CEO, CFO, CMO titles in the upper salary titles. Let's create a "C-SUITE" title category, and then create a dataframe that contains all of these titles, plus all of the academic year faculty.

"""

# print(meanSalaries['title'].values[:30])
df['title']=df['title'].str.replace('.*C[EFM]O.*', 'C-SUITE')
msdf=pd.DataFrame(df.groupby('title')['gross'].count().reset_index(name='count').sort_values('count', ascending=False))
print('..................................................')
print(msdf.head(6))

print('..................................................')
ms_prof=msdf[(msdf['title'].str.contains('PROF-AY'))|(msdf['title'].str.contains('C-SUITE'))]
print(ms_prof.head(10))

print(ms_prof['title'].unique())

titles = [
          'C-SUITE',
          'PROF-AY-LAW', 
          'ASST PROF-AY', 'ASSOC PROF-AY', 'PROF-AY',
          'ASST ADJ PROF-AY', 'ASSOC ADJ PROF-AY', 'ADJ PROF-AY',  'ACT ASST PROF-AY', 
          'PROF-AY-B/E/E', 'ASSOC PROF-AY-B/E/E', 'ASST PROF-AY-B/E/E'
         ]
mask=df['title'].isin(titles)
df_profs=df[mask]
print(df_profs.shape)


df_index=df_profs.groupby('title')['gross'].median().sort_values().index
print(df_index[:10])

import seaborn as sns

sns.set(rc={'figure.figsize':(11,4)})
ax=sns.boxplot(x='title',y='gross',data=df_profs,order=df_index)
ax.set_xticklabels(ax.get_xticklabels(),rotation=90)

"""5.2 Linear Regression

We'll try to fit the above salaries to titles using linear regression, using standard features and a polynomial feature expansion.
"""

# print(df_profs.head(10))

df_median = pd.DataFrame(df_profs.groupby('title')['gross'].median().sort_values())
# print(df_median.head(6))
df_median.reset_index(inplace=True)
print(df_median.head(6))


# Define Features and Target
features = df_median.index.values
print(features.shape)
features = df_median.index.values.reshape(-1,1)
print(features.shape)
print('................................')
print(features[:20])
target = df_median.loc[:,'gross']
print(target.shape)


# Polynomial Features
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=3, include_bias=False)
pf = poly.fit_transform(features)
print(pf[:6])

"""Linear Regression Training and TestingÂ¶

We now train the two linear models: one with regular features, and the other with polynomial features.
"""

from sklearn.linear_model import LinearRegression
# 1. Linear Prediction
regr = LinearRegression()
regr.fit(features,target)
y1_hat = regr.predict(features)

# 2. Linear Prediction, Polynomial Feature
pregr = LinearRegression()
pregr.fit(pf,target)
y2_hat = pregr.predict(poly.fit_transform(features))

import numpy as np
import matplotlib.pyplot as plt


# Points
plt.plot(features, target, '.', color='blue', markersize=12)

# Linear Regression
plt.plot(features, y1_hat, color='red', alpha=0.4, linewidth=3)
plt.plot(features, y2_hat, color='green', alpha=0.4, linewidth=3)

plt.grid(linestyle='--', alpha=0.6)
plt.xticks(rotation=90)
plt.xlabel('Level')
plt.ylabel('Median Salary')
plt.show()

from sklearn.metrics import mean_squared_error

print("""
RSS Linear Features:\t\t{} 
RSS Polynomial Feautres:\t{}
""".format(
            np.sqrt(mean_squared_error(target, y1_hat)),
            np.sqrt(mean_squared_error(target, y2_hat)
                   )))